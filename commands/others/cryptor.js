exports.help = {
	name: 'cryptor',
	description: '–ü—Ä–æ—Å—Ç–µ–Ω—å–∫–∏–π —à–∏—Ñ—Ä–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π.',
};

exports.command = {
	name: exports.help.name,
	description: exports.help.description,
	options: [
		{
			name: '—Ä–µ–∂–∏–º',
			description: '–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã',
			type: 3,
			required: true,
			choices: [
				{
					name: '–ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å',
					value: 'crypt',
				},
				{
					name: '–î–µ—à–∏—Ñ—Ä–æ–≤–∞—Ç—å',
					value: 'decrypt',
				},
			],
		},
		{
			name: '—Ç–µ–∫—Å—Ç',
			description: '–¢–µ–∫—Å—Ç',
			type: 3,
			required: true,
		},
	],
};

exports.run = (client, interaction) => {
	const embed = new client.userLib.discord.MessageEmbed().setColor(client.userLib.colors.inf).setTitle('üîê Encryptor');

	switch (interaction.options.getString('—Ä–µ–∂–∏–º')) {
		case 'crypt':
			embed.setDescription(`–†–µ–∂–∏–º: **—à–∏—Ñ—Ä–æ–≤–∫–∞**\n\`\`\`${crypt(interaction.options.getString('—Ç–µ–∫—Å—Ç'))}\`\`\``);
			break;

		case 'decrypt':
			embed.setDescription(`–†–µ–∂–∏–º: **–¥–µ—à–∏—Ñ—Ä–æ–≤–∫–∞**\n\`\`\`${decrypt(interaction.options.getString('—Ç–µ–∫—Å—Ç'))}\`\`\``);
			break;

		default:
			return client.userLib.retError(interaction, '–£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º!');
	}

	interaction.reply({ embeds: [embed], ephemeral: true });
};

function crypt(text) {
	let crypted = '';
	const cryptSeed = text.charCodeAt(0);
	crypted += String.fromCodePoint(text.charCodeAt(0) + 11);
	for (let i = 1; i < text.length; i++) {
		crypted += String.fromCodePoint(text.charCodeAt(i) + i + cryptSeed);
	}
	return crypted;
}

function decrypt(crypted) {
	let text = '';
	const cryptSeed = crypted.charCodeAt(0) - 11;
	text += String.fromCodePoint(crypted.charCodeAt(0) - 11);
	for (let i = 1; i < crypted.length; i++) {
		if (crypted.charCodeAt(i) - i - cryptSeed > 0) text += String.fromCodePoint(crypted.charCodeAt(i) - i - cryptSeed);
	}
	return text;
}
