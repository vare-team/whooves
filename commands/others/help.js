import { readdirSync, lstatSync } from 'fs'
import colors from "../../models/colors.js";
import {MessageEmbed} from "discord.js";
import {respondError} from "../../utils/modules/respondMessages.js";
import admins from "../../models/admins.js";
import {commands} from "../index.js";

export const help = {
	name: 'help',
	description: '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–∑–Ω–∞—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥–µ.',
};

export const command = {
	name: 'help',
	description: '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–∑–Ω–∞—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥–µ.',
	options: [
		{
			name: '–∫–æ–º–∞–Ω–¥–∞',
			description: '–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã',
			type: 3,
			autocomplete: true,
		},
	],
};

const tiers = {
		'-3': '–í–ª–∞–¥–µ–ª—å—Ü—É —Å–µ—Ä–≤–µ—Ä–∞',
		'-2': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —Å–µ—Ä–≤–µ—Ä–∞',
		'-1': '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º —Å–µ—Ä–≤–µ—Ä–∞',
		0: '–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
		1: '–ù–µ –≤–∞–∂–Ω–æ',
		2: '–¶–∞—Ä—è–º –±–∞—Ç—é—à–∫–∞–º',
	},
	modules = {
		dev: '–ö–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤',
		fun: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
		games: '–ò–≥—Ä—ã',
		pony: '–ü–æ–Ω–∏-–∫–æ–º–∞–Ω–¥—ã',
		mod: '–ú–æ–¥–µ—Ä–∞—Ü–∏—è –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è',
		social: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ',
		others: '–û—Å—Ç–∞–ª—å–Ω—ã–µ',
		images: '–†–∞–±–æ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏',
		context: '–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã',
	};

export function run (interaction) {
	let cmds = Object.values(commands);
	let cmd = interaction.options.getString('–∫–æ–º–∞–Ω–¥–∞');
	let fields = []
	let embed = new MessageEmbed().setColor(colors.information)

	if (!cmd) {
		embed.setDescription(`–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å \`/help [–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã]\` —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!`)
			.setTitle(':paperclip: –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:');

		for (let command of cmds.filter(x => x.help !== undefined)) {
			let helpData = command.help;
			fields.push({
				name: helpData.name,
				value: helpData.description,
				inline: true
			})
		}

		embed.addFields(fields)

		return interaction.reply({ embeds: [embed], ephemeral: true });
	}

	const command = cmds.filter(x => x.help && x.help.name === cmd)[0];

	if (!command) {
		respondError(
			interaction,
			'–í–æ–∑–º–æ–∂–Ω–æ, –≤ –¥—Ä—É–≥–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–∏ —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –∏ –µ—Å—Ç—å, –Ω–æ —Ç—É—Ç –ø–æ–∫–∞ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏.'
		);
		return;
	}
	if (command.help.description)
		embed.setDescription(command.help.description);

	embed.setTitle(
		command.help.module === 'context'
			? 'üñ±Ô∏è –û–ø—Ü–∏—è: ' + command.help.name
			: 'üîé –ö–æ–º–∞–Ω–¥–∞: ' + command.help.name);

	embed.addFields([{
		name: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ',
		value: command.command.dm_permission
			? '–¢–æ–ª—å–∫–æ –¥–ª—è –≥–∏–ª—å–¥–∏–π'
			: '–õ–° –ò –ì–∏–ª—å–¥–∏—è'
	}])

	interaction.reply({ embeds: [embed], ephemeral: true });
}

export async function autocomplete (commands, interaction) {
	const respond = [];
	let cmd = interaction.options.getString('–∫–æ–º–∞–Ω–¥–∞') || "";

	for (let element of commands) {
		if (element.help.name.toLowerCase().startsWith(cmd.toLowerCase()) && respond.length < 25)
			respond.push({
				name: element.help.name,
				value: element.help.name
			})
	}

	interaction.respond(respond)
}

export default {
	help,
	command,
	run,
	autocomplete
}
