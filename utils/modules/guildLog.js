/**
 * Send Guild custom log
 * @function
 * @param {string} type - Type of log
 * @param guild
 * @param {object} data - Nedded data
// * @param {object} data.user - User data
// * @param {*} data.user.id - User id
// * @param {Date} data.user.createdAt - User created data
// * @param {object} data.channel - Channel data
// * @param {string} data.channel.id - Channel id
// * @param {string} data.channel.name - Channel name
// * @param {string} data.channel.oldName - Channel name
// * @param {string} data.channel.newName - Channel name
// * @param {string} data.content - Message
// * @param {string} data.oldContent - Old Message
// * @param {string} data.newContent - New Message
 */
export async function sendLogChannel(type, guild, data) {
	let logchannel = await this.promise(con, con.queryValue, 'SELECT logchannel FROM guilds WHERE guildId = ?', [
		guild.id,
	]);
	logchannel = logchannel.res;
	if (!logchannel) return;
	const channel = guild.channels.cache.get(logchannel);

	if (!channel || !channel.permissionsFor(client.user).has('SEND_MESSAGES')) {
		con.update('guilds', { guildId: guild.id, logchannel: null }, () => {});
		return;
	}

	const now = new Date();
	let text = `[<t:${Math.floor(now / 1000)}:R>] `;

	if (!type) return console.warn('Error! –¢–∏–ø –Ω–µ —É–∫–∞–∑–∞–Ω');
	switch (type) {
		case 'memberAdd':
			text += `üìà **–ó–∞—Ö–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–∞** ${data.user.tag} (ID: ${data.user.id});\n–ê–∫–∫–∞—É–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω <t:${data.user.createdAt}:R>;`;
			break;

		case 'memberRemove':
			text += `üìâ **–í—ã—Ö–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–∞** ${data.user.tag}  (ID: ${data.user.id});\n–ê–∫–∫–∞—É–Ω—Ç –∑–∞—à—ë–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä <t:${data.user.joinedAt}:R>`;
			break;

		case 'messageDelete':
			text += `‚úÇ **–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è** –æ—Ç ${data.user.tag}  (ID: ${data.user.id}), –≤ –∫–∞–Ω–∞–ª–µ <#${data.channel.id}>;\n${
				data.content.length > 1950 ? '–°–æ–æ–±—â–µ–Ω–∏–µ –±–æ–ª—å—à–µ 2k —Å–∏–º–≤–æ–ª–æ–≤.' : `>>> ${data.content}`
			}`;
			break;

		case 'messageDeleteBulk':
			text += `‚úÇüìÇ **–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π** –≤ –∫–∞–Ω–∞–ª–µ <#${data.channel.id}>, –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ __${data.size}__`;
			break;

		case 'messageUpdate':
			text += `‚úè **–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è** ${data.user.tag}  (ID: ${data.user.id}), –≤ –∫–∞–Ω–∞–ª–µ <#${data.channel.id}>;\n${
				data.oldContent.length + data.newContent.length > 1950
					? '–°–æ–æ–±—â–µ–Ω–∏–µ –±–æ–ª—å—à–µ 2k —Å–∏–º–≤–æ–ª–æ–≤.'
					: `>>> ${data.oldContent}\n\`\`======\`\`\n${data.newContent}`
			}`;
			break;

		case 'voiceStateAdd':
			text += `‚òé **–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–Ω–∞–ª—É** ${data.user.tag}  (ID: ${data.user.id}), –∫–∞–Ω–∞–ª "__${data.channel.name}__";`;
			break;

		case 'voiceStateRemove':
			text += `‚òé **–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –∫–∞–Ω–∞–ª–∞** ${data.user.tag}  (ID: ${data.user.id}), –∫–∞–Ω–∞–ª–∞ "__${data.channel.name}__";`;
			break;

		case 'voiceStateUpdate':
			text += `‚òé **–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏** ${data.user.tag}  (ID: ${data.user.id}), –∏–∑ –∫–∞–Ω–∞–ª–∞ "__${data.channel.oldName}__", –≤ –∫–∞–Ω–∞–ª "__${data.channel.newName}__";`;
			break;

		case 'commandUse':
			text += `üî® **–î–µ–π—Å—Ç–≤–∏–µ: "${data.content}"** –æ—Ç ${data.user.tag}  (ID: ${data.user.id}), –≤ –∫–∞–Ω–∞–ª–µ <#${data.channel.id}>;`;
			break;

		default:
			text += `–°—Ç—Ä–∞—à–Ω–æ. –û—á–µ–Ω—å —Å—Ç—Ä–∞—à–Ω–æ. –ú—ã –Ω–µ –∑–Ω–∞–µ–º —á—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ. –ï—Å–ª–∏ –±—ã –º—ã –∑–Ω–∞–ª–∏ —á—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ, –Ω–æ –º—ã –Ω–µ –∑–Ω–∞–µ–º —á—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ.;`;
	}

	channel.send(text).catch(err => console.log(`\n–û—à–∏–±–∫–∞!\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: ${err}`));
}
